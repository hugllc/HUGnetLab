#!/bin/bash -e

. /usr/share/debconf/confmodule

export PATH=$PATH:/sbin:/usr/sbin:/bin:/usr/bin

# This command can be used as pipe to syslog. With "-s" it also logs to stderr.
ERR_LOGGER="logger -p daemon.err -t hugnetlab -i -s"

create_ini()
{
    db_get hugnetlab/mysql_user
    MYSQLDB=${RET}
    MYSQLUSER=${RET}
    db_get hugnetlab/mysql_pw
    MYSQLPW=${RET}
    db_get hugnetlab/device
    SERIALPORT=${RET}

    FILE=/etc/hugnet/config.ini
    ROUTERSOCK=/tmp/HUGnetRouter
    MYSQLSOCK=/var/run/mysqld/mysqld.sock
    FIRMWARE=http://downloads.hugllc.com/firmware
    GATEWAY=6



    cat << EOF > ${FILE}
; The general HUGnet config file.  This file contains all of the configuration
; to get the basic system off the ground.
;
; This is the general section.

; Every data collector has a unique UUID.  This way they can keep track of eachother
; as well as have some security.
uuid = "`uuidgen`"
GatewayKey = ${GATEWAY}

; How verbose the software is.  Integer from 0-10.  For testing only.
verbose = 0

; Enable debugging.  0 = disabled, 1 = enabled.  For testing only
debug = 0

; The firmware section
[firmware]
; This is the URL that the firmware is downloaded from
url = ${FIRMWARE}

; This should only be filled out if there is a master server.
; [master]
; UUID of the master server
;uuid = put master uuid here
; URL of the master server
;url = put master url here

; This section is for the network connection for everything but the router.
; There should be only one network section here.
[network]
; Network driver to use.
default["driver"] = "Socket"
; Type of socket to use.  AF_UNIX or AF_INET
default["type"]   = AF_UNIX
; Location to get to the socket.  Either a file name or URL
default["location"] = "${ROUTERSOCK}"
; Permissions to attach to the file.
default["filePerms"] = 0666

; This section is for the router.  It can have multiple connections.
[router]
; Network driver to use
default["driver"] = "Serial"
; A file for linux like /dev/ttyS0 or /dev/ttyUSB0.
; A 'com' value for Windows.  com1 or com2
default["location"] = "${SERIALPORT}"
; In quiet mode the interface fails silently.  Otherwise an exception happens if
; the port is not available.  0 = disabled, 1 = enabled.
default["quiet"] = 1

; This is the socket server for the other processes to get to the HUGnet bus
; Network driver to use
local["driver"] = "SocketServer"
; Type of socket to use.  AF_UNIX or AF_INET
local["type"] = AF_UNIX
; Location to get to the socket.  Either a file name or URL
local["location"] = "${ROUTERSOCK}"
; In bus mode, any data that comes in one interface goes out all of the other
; interfaces.  0 to disable, 1 to enable.
local["bus"] = 1
; This forces the removal of the old socket file if it exists.
; 1 forces removal, 0 errors out if file exists.
local["force"] = 1
; Permissions to attach to the file.
local["perms"] = 0666
; Whether or not to forward packets.  0 = don't forward, 1 = forward
forward = 1

; The database servers
[servers]

; The database to use.  'HUGnet' is the default
default["db"] = ${MYSQLDB}
; The driver to use.
default["driver"] = "mysql"
; The socket or URL to connect to.
default["socket"] = "${MYSQLSOCK}"
; The user to connect as
default["user"] = "${MYSQLUSER}"
; The password to use to connect
default["password"] = '${MYSQLPW}'
; This is used if there are multiple database connections.
default["group"] = "default"

EOF

}

create_db()
{
    db_get hugnetlab/mysql_root_user
    ruser=${RET}
    db_get hugnetlab/mysql_root_pw
    rpw=${RET}
    db_get hugnetlab/mysql_user
    user=${RET}
    db_get hugnetlab/mysql_pw
    pw=${RET}

    tfile=`mktemp`

    cat << EOF > ${tfile}
CREATE USER '${user}'@'localhost' IDENTIFIED BY '${pw}';
GRANT USAGE ON * . * TO '${user}'@'localhost' IDENTIFIED BY '${pw}' WITH MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0 ;
CREATE DATABASE IF NOT EXISTS \`${user}\` ;
GRANT ALL PRIVILEGES ON \`${user}\` . * TO '${user}'@'localhost';
FLUSH PRIVILEGES;
EOF

    mysql -u${ruser} -p${rpw} < ${tfile} > /dev/null 2>&1 || true
    rm -f ${tfile}
    return 0
}

service hugnet_router stop > /dev/null 2>&1 || true
service hugnet_gatherer stop > /dev/null 2>&1 || true
service hugnet_updater stop > /dev/null 2>&1 || true




if [ ! -f "/etc/hugnet/config.ini" ]; then
    create_db
    mkdir -p /etc/hugnet | $ERR_LOGGER
    create_ini
fi

service hugnet_router start > /dev/null 2>&1 || true
service hugnet_gatherer start > /dev/null 2>&1 || true
service hugnet_updater start > /dev/null 2>&1 || true



exit 0
